package pr16_z1;

/* Объяснение 1 шага:
1) Выражение 2 / 0 пытается выполнить деление целого числа на ноль, что является недопустимой математической операцией в Java. Деление на ноль не имеет смысла, так как нельзя получить число, которое при умножении на ноль даст два.
2) Из-за того, что деление на ноль невозможно, программа генерирует исключение типа java.lang.ArithmeticException, которое наследуется от класса java.lang.RuntimeException. Исключение - это ситуация, которая нарушает нормальное выполнение программы и требует специальной обработки.
3) Поскольку программа не содержит конструкции try-catch, которая позволяет перехватывать и обрабатывать исключения, она не может продолжить работу и завершается с ошибкой. При этом на экран выводится сообщение об исключении, которое содержит его тип, причину и место возникновения.
*/

/* Объяснение 2 шага (деление 2.0 на 0.0):
 * Если вы замените 2/0 на 2.0/0.0 и повторно вызовите метод, 
 * то программа не завершится с ошибкой, но выведет на экран значение Infinity1. 
 * Это потому, что в Java есть специальные значения для обозначения бесконечности 
 * и неопределенности, которые могут возникать при делении вещественных чисел2. 
 * Когда вы пишете 2.0/0.0, вы используете вещественные литералы типа double, 
 * которые могут принимать значения Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY 
 * и Double.NaN2. Эти значения не являются числами в обычном смысле, а представляют 
 * собой специальные случаи, которые могут быть полезны для некоторых математических 
 * вычислений
 */

/* Объяснение 3 шага (выполнение программы ниже):
 * 1) Выражение 2 / 0 пытается выполнить деление целого числа на ноль, что является недопустимой математической операцией в Java. Деление на ноль не имеет смысла, так как нельзя получить число, которое при умножении на ноль даст два.
 * 2) Из-за того, что деление на ноль невозможно, программа генерирует исключение типа java.lang.ArithmeticException, которое наследуется от класса java.lang.RuntimeException. Исключение - это ситуация, которая нарушает нормальное выполнение программы и требует специальной обработки.
 * 3) Поскольку программа содержит конструкцию try-catch, она может продолжить работу и не завершается с ошибкой. В блоке catch программа перехватывает исключение типа ArithmeticException и присваивает его переменной e. Затем программа выводит на экран сообщение Attempted division by zero, которое указывает на причину ошибки.
 */

public class Exception1 {
	public static void main(String[] args) {
		try {
		    System.out.println( 2.0/0.0 );
		} catch (java.lang.ArithmeticException e) {
		    System.out.println("Нельзя делить на ноль!");
		  }
	}
}

